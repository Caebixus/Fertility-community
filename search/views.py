from django.shortcuts import render
from django.core.paginator import Paginator
from django import template
from clinic.models import BasicClinic
from django.db.models import Avg
from .choices import CATEGORY_CHOICES_STATES, CATEGORY_CHOICES_US_REGION
from itertools import chain
from django.core.paginator import EmptyPage, PageNotAnInteger, Paginator


# Create your views here.
def search(request):
    if 'States' in request.GET:

        states = request.GET['States']

        if states == 'US':

            queryset_list = BasicClinic.objects.all()
            queryset_list = queryset_list.filter(is_published=True)
            queryset_list = queryset_list.filter(pro_is_published=False)
            queryset_list = queryset_list.filter(clinicState__iexact='United States')

            pro_listings = BasicClinic.objects.all()

            pro_queryset_list = BasicClinic.objects.order_by('?')
            pro_queryset_list = pro_queryset_list.filter(pro_is_published=True)
            pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='United States')

            my_total_count = BasicClinic.objects.all()
            my_total_count = my_total_count.filter(is_published=True)
            my_total_count = my_total_count.filter(clinicState__iexact='United States')
            my_total_count = my_total_count.count()

            averageIVFPrice = BasicClinic.objects.filter(clinicState__iexact='United States').aggregate(average=Avg('ivf_treatment_cost'))
            averageEggPrice = BasicClinic.objects.filter(clinicState__iexact='United States').aggregate(average=Avg('egg_donor_recipients_cost'))
            averageEmbryoPrice = BasicClinic.objects.filter(clinicState__iexact='United States').aggregate(average=Avg('embryo_donor_recipients_cost'))
            averageSpermPrice = BasicClinic.objects.filter(clinicState__iexact='United States').aggregate(average=Avg('sperm_donor_recipients_cost'))
            averageICSIPrice = BasicClinic.objects.filter(clinicState__iexact='United States').aggregate(average=Avg('icsi_treatment_cost'))

            queryset_list = queryset_list.filter(clinicRegion__iexact='California')
            pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='California')


            if 'Region' in request.GET:
                region = request.GET['Region']

                if 'AL' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Alabama')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Alabama')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)
                elif 'AK' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Alaska')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Alaska')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'CA' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='California')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='California')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'CO' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Colorado')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Colorado')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'CT' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Connecticut')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Connecticut')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'DE' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Delaware')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Delaware')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'FL' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Florida')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Florida')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'GA' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Georgia')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Georgia')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'HI' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Hawaii')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Hawaii')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'ID' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Idaho')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Idaho')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'IL' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Illinois')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Illinois')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'IN' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Indiana')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Indiana')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'IA' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Iowa')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Iowa')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'KS' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Kansas')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Kansas')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'KY' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Kentucky')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Kentucky')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'LA' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Louisiana')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Louisiana')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'ME' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Maine')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Maine')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'MD' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Maryland')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Maryland')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'MA' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Massachusetts')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Massachusetts')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'MI' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Michigan')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Michigan')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'MN' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Minnesota')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Minnesota')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'MS' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Mississippi')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Mississippi')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'MO' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Missouri')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Missouri')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'MT' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Montana')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Montana')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'NE' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Nebraska')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Nebraska')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'NV' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Nevada')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Nevada')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'NH' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='New Hampshire')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='New Hampshire')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'NJ' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='New Jersey')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='New Jersey')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'NM' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='New Mexico')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='New Mexico')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'NY' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='New York')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='New York')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'NC' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='North Carolina')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='North Carolina')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'ND' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='North Dakota')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='North Dakota')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'OH' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Ohio')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Ohio')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'OK' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Oklahoma')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Oklahoma')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'OR' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Oregon')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Oregon')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'PA' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Pennsylvania')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Pennsylvania')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'RI' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Rhode Island')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Rhode Island')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'SC' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='South Carolina')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='South Carolina')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'SD' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='South Dakota')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='South Dakota')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'TN' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Tennessee')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Tennessee')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'TX' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Texas')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Texas')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'UT' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Utah')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Utah')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'VT' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Vermont')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Vermont')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'VA' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Virginia')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Virginia')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'WA' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Washington')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Washington')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'WV' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='West Virginia')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='West Virginia')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'WI' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Wisconsin')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Wisconsin')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'WY' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Wyoming')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Wyoming')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                elif 'DC' in request.GET:
                    queryset_list = queryset_list.filter(clinicRegion__iexact='District of Columbia')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='District of Columbia')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Fertilitypreservationtrue':
                            queryset_list = queryset_list.filter(fertility_preservation=True)
                            pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(pro_queryset_list) + list(queryset_list)
                            my_total_count = queryset_list.count() + pro_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'listings': queryset_list,
                                'pro_listings': pro_queryset_list,
                                'order_data': paginationing,
                                'paginationing': paginationing,
                                'averageIVFPrice': averageIVFPrice,
                                'averageEggPrice': averageEggPrice,
                                'averageEmbryoPrice': averageEmbryoPrice,
                                'averageSpermPrice': averageSpermPrice,
                                'averageICSIPrice': averageICSIPrice,
                                'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                                'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                                'my_total_count': my_total_count,
                                'values': request.GET,
                                }

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'listings': queryset_list,
                            'pro_listings': pro_queryset_list,
                            'order_data': paginationing,
                            'paginationing': paginationing,
                            'averageIVFPrice': averageIVFPrice,
                            'averageEggPrice': averageEggPrice,
                            'averageEmbryoPrice': averageEmbryoPrice,
                            'averageSpermPrice': averageSpermPrice,
                            'averageICSIPrice': averageICSIPrice,
                            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                            'my_total_count': my_total_count,
                            'values': request.GET,
                            }

                        return render(request, 'search/search.html', context)

                else:
                    order_data = list(pro_queryset_list) + list(queryset_list)

                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'listings': queryset_list,
                        'pro_listings': pro_queryset_list,
                        'order_data': paginationing,
                        'paginationing': paginationing,
                        'averageIVFPrice': averageIVFPrice,
                        'averageEggPrice': averageEggPrice,
                        'averageEmbryoPrice': averageEmbryoPrice,
                        'averageSpermPrice': averageSpermPrice,
                        'averageICSIPrice': averageICSIPrice,
                        'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                        'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                        'my_total_count': my_total_count,
                        'values': request.GET,
                        }

                    return render(request, 'search/search.html', context)

            else:
                order_data = list(pro_queryset_list) + list(queryset_list)

                paginator = Paginator(order_data, 12)
                page = request.GET.get('page')
                paginationing = paginator.get_page(page)

                context = {
                    'listings': queryset_list,
                    'pro_listings': pro_queryset_list,
                    'order_data': paginationing,
                    'paginationing': paginationing,
                    'averageIVFPrice': averageIVFPrice,
                    'averageEggPrice': averageEggPrice,
                    'averageEmbryoPrice': averageEmbryoPrice,
                    'averageSpermPrice': averageSpermPrice,
                    'averageICSIPrice': averageICSIPrice,
                    'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                    'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
                    'my_total_count': my_total_count,
                    'values': request.GET,
                    }

                return render(request, 'search/search.html', context)

        else:
            queryset_list = BasicClinic.objects.all()
            queryset_list = queryset_list.filter(is_published=True)
            queryset_list = queryset_list.filter(pro_is_published=False)

            my_total_count = BasicClinic.objects.all()
            my_total_count = my_total_count.filter(is_published=True)
            my_total_count = my_total_count.count()

            pro_listings = BasicClinic.objects.all()

            pro_queryset_list = BasicClinic.objects.order_by('?')
            pro_queryset_list = pro_queryset_list.filter(pro_is_published=True)

            if 'treatments' in request.GET:

                treatments = request.GET['treatments']

                if treatments == 'Alltreatmentstrue':
                    order_data = list(pro_queryset_list) + list(queryset_list)

                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'listings': queryset_list,
                        'pro_listings': pro_queryset_list,
                        'order_data': paginationing,
                        'paginationing': paginationing,
                        'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                        'my_total_count': my_total_count,
                        'values': request.GET,
                        }

                    return render(request, 'search/search.html', context)

                elif treatments == 'IVFtreatmenttrue':
                    queryset_list = queryset_list.filter(ivf_treatment=True)
                    pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                    order_data = list(pro_queryset_list) + list(queryset_list)
                    my_total_count = queryset_list.count() + pro_queryset_list.count()

                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'listings': queryset_list,
                        'pro_listings': pro_queryset_list,
                        'order_data': paginationing,
                        'paginationing': paginationing,
                        'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                        'my_total_count': my_total_count,
                        'values': request.GET,
                        }

                    return render(request, 'search/search.html', context)

                elif treatments == 'ICSItreatmenttrue':
                    queryset_list = queryset_list.filter(icsi_treatment=True)
                    pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                    order_data = list(pro_queryset_list) + list(queryset_list)
                    my_total_count = queryset_list.count() + pro_queryset_list.count()

                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'listings': queryset_list,
                        'pro_listings': pro_queryset_list,
                        'order_data': paginationing,
                        'paginationing': paginationing,
                        'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                        'my_total_count': my_total_count,
                        'values': request.GET,
                        }

                    return render(request, 'search/search.html', context)

                elif treatments == 'Eggdonationrecipientstrue':
                    queryset_list = queryset_list.filter(egg_donor_recipients=True)
                    pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                    order_data = list(pro_queryset_list) + list(queryset_list)
                    my_total_count = queryset_list.count() + pro_queryset_list.count()

                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'listings': queryset_list,
                        'pro_listings': pro_queryset_list,
                        'order_data': paginationing,
                        'paginationing': paginationing,
                        'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                        'my_total_count': my_total_count,
                        'values': request.GET,
                        }

                    return render(request, 'search/search.html', context)

                elif treatments == 'Spermdonationrecipientstrue':
                    queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                    pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                    order_data = list(pro_queryset_list) + list(queryset_list)
                    my_total_count = queryset_list.count() + pro_queryset_list.count()

                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'listings': queryset_list,
                        'pro_listings': pro_queryset_list,
                        'order_data': paginationing,
                        'paginationing': paginationing,
                        'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                        'my_total_count': my_total_count,
                        'values': request.GET,
                        }

                    return render(request, 'search/search.html', context)

                elif treatments == 'Embryodonationrecipientstrue':
                    queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                    pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                    order_data = list(pro_queryset_list) + list(queryset_list)
                    my_total_count = queryset_list.count() + pro_queryset_list.count()

                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'listings': queryset_list,
                        'pro_listings': pro_queryset_list,
                        'order_data': paginationing,
                        'paginationing': paginationing,
                        'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                        'my_total_count': my_total_count,
                        'values': request.GET,
                        }

                    return render(request, 'search/search.html', context)

                elif treatments == 'Fertilitypreservationtrue':
                    queryset_list = queryset_list.filter(fertility_preservation=True)
                    pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                    order_data = list(pro_queryset_list) + list(queryset_list)
                    my_total_count = queryset_list.count() + pro_queryset_list.count()

                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'listings': queryset_list,
                        'pro_listings': pro_queryset_list,
                        'order_data': paginationing,
                        'paginationing': paginationing,
                        'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                        'my_total_count': my_total_count,
                        'values': request.GET,
                        }

                    return render(request, 'search/search.html', context)

                elif treatments == 'Surrogacytrue':
                    queryset_list = queryset_list.filter(surrogacy=True)
                    pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                    order_data = list(pro_queryset_list) + list(queryset_list)
                    my_total_count = queryset_list.count() + pro_queryset_list.count()

                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'listings': queryset_list,
                        'pro_listings': pro_queryset_list,
                        'order_data': paginationing,
                        'paginationing': paginationing,
                        'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                        'my_total_count': my_total_count,
                        'values': request.GET,
                        }

                    return render(request, 'search/search.html', context)

                elif treatments == 'IUItreatmenttrue':
                    queryset_list = queryset_list.filter(iui_treatment=True)
                    pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                    order_data = list(pro_queryset_list) + list(queryset_list)
                    my_total_count = queryset_list.count() + pro_queryset_list.count()

                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'listings': queryset_list,
                        'pro_listings': pro_queryset_list,
                        'order_data': paginationing,
                        'paginationing': paginationing,
                        'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                        'my_total_count': my_total_count,
                        'values': request.GET,
                        }
                    return render(request, 'search/search.html', context)

                elif treatments == 'Singlewomantreatmenttrue':
                    queryset_list = queryset_list.filter(single_woman_treatment=True)
                    pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                    order_data = list(pro_queryset_list) + list(queryset_list)
                    my_total_count = queryset_list.count() + pro_queryset_list.count()

                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'listings': queryset_list,
                        'pro_listings': pro_queryset_list,
                        'order_data': paginationing,
                        'paginationing': paginationing,
                        'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                        'my_total_count': my_total_count,
                        'values': request.GET,
                        }

                    return render(request, 'search/search.html', context)

                elif treatments == 'ReciprocalIVFtrue':
                    queryset_list = queryset_list.filter(reciprocal_treatment=True)
                    pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                    order_data = list(pro_queryset_list) + list(queryset_list)
                    my_total_count = queryset_list.count() + pro_queryset_list.count()

                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'listings': queryset_list,
                        'pro_listings': pro_queryset_list,
                        'order_data': paginationing,
                        'paginationing': paginationing,
                        'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                        'my_total_count': my_total_count,
                        'values': request.GET,
                        }

                    return render(request, 'search/search.html', context)

                else:
                    order_data = list(pro_queryset_list) + list(queryset_list)

                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'listings': queryset_list,
                        'pro_listings': pro_queryset_list,
                        'order_data': paginationing,
                        'paginationing': paginationing,
                        'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                        'my_total_count': my_total_count,
                        'values': request.GET,
                        }

                    return render(request, 'search/search.html', context)

                order_data = list(pro_queryset_list) + list(queryset_list)

                paginator = Paginator(order_data, 12)
                page = request.GET.get('page')
                paginationing = paginator.get_page(page)

                context = {
                    'listings': queryset_list,
                    'pro_listings': pro_queryset_list,
                    'order_data': paginationing,
                    'paginationing': paginationing,
                    'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
                    'my_total_count': my_total_count,
                    'values': request.GET,
                    }

                return render(request, 'search/search.html', context)


    else:
        context = {
            'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES,
            'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION,
            }

        return render(request, 'search/search.html', context)
