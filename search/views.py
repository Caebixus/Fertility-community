from django.shortcuts import render
from django import template
from clinic.models import BasicClinic
from packages.models import Packages
from django.db.models import Avg
from .choices import CATEGORY_CHOICES_STATES, CATEGORY_CHOICES_US_REGION, CATEGORY_CHOICES_UK_CITIES, CATEGORY_CHOICES_CZ_CITIES, CATEGORY_CHOICES_SP_CITIES
from django.core.paginator import EmptyPage, PageNotAnInteger, Paginator

def shuffled(x):
    import random
    y = x[:]
    random.shuffle(y)
    return y

# Create your views here.
def search(request):
    if 'States' in request.GET:

        states = request.GET['States']

        if states == 'US':

            queryset_list = BasicClinic.objects.all()
            queryset_list = queryset_list.filter(is_published=True).exclude(pro_is_published=True)

            pro_queryset_list = BasicClinic.objects.all()
            pro_queryset_list = pro_queryset_list.filter(pro_is_published=True).exclude(ppq_is_published=True)

            ppq_queryset_list = BasicClinic.objects.all()
            ppq_queryset_list = ppq_queryset_list.filter(ppq_is_published=True)

            my_total_count = BasicClinic.objects.all()
            my_total_count = my_total_count.filter(is_published=True)

            averageIVFPrice = BasicClinic.objects.filter(clinicState__iexact='United States').aggregate(average=Avg('ivf_treatment_cost'))
            averageEggPrice = BasicClinic.objects.filter(clinicState__iexact='United States').aggregate(average=Avg('egg_donor_recipients_cost'))
            averageEmbryoPrice = BasicClinic.objects.filter(clinicState__iexact='United States').aggregate(average=Avg('embryo_donor_recipients_cost'))
            averageSpermPrice = BasicClinic.objects.filter(clinicState__iexact='United States').aggregate(average=Avg('sperm_donor_recipients_cost'))
            averageICSIPrice = BasicClinic.objects.filter(clinicState__iexact='United States').aggregate(average=Avg('icsi_treatment_cost'))


            if 'Region' in request.GET:
                region = request.GET['Region']

                queryset_list = queryset_list.filter(clinicState__iexact='United States')
                pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='United States')
                ppq_queryset_list = ppq_queryset_list.filter(clinicState__iexact='United States')

                if region == 'AL':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Alabama')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Alabama')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Alabama')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Alabama')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'AK':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Alaska')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Alaska')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Alaska')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Alaska')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'AZ':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Arizona')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Arizona')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Arizona')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Arizona')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'AR':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Arkansas')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Arkansas')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Arkansas')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Arkansas')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'CA':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='California')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='California')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='California')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='California')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'CO':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Colorado')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Colorado')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Colorado')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Colorado')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'CT':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Connecticut')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Connecticut')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Connecticut')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Connecticut')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'DE':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Delaware')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Delaware')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Delaware')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Delaware')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'FL':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Florida')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Florida')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Florida')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Florida')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'GA':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Georgia')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Georgia')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Georgia')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Georgia')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'HI':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Hawaii')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Hawaii')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Hawaii')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Hawaii')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'ID':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Idaho')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Idaho')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Idaho')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Idaho')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'IL':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Illinois')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Illinois')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Illinois')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Illinois')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'IN':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Indiana')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Indiana')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Indiana')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Indiana')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'IA':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Iowa')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Iowa')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Iowa')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Iowa')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'KS':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Kansas')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Kansas')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Kansas')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Kansas')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'KY':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Kentucky')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Kentucky')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Kentucky')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Kentucky')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'LA':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Louisiana')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Louisiana')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Louisiana')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Louisiana')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'ME':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Maine')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Maine')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Maine')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Maine')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'MD':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Maryland')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Maryland')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Maryland')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Maryland')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'MA':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Massachusetts')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Massachusetts')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Massachusetts')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Massachusetts')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'MI':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Michigan')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Michigan')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Michigan')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Michigan')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'MN':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Minnesota')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Minnesota')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Minnesota')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Minnesota')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'MS':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Mississippi')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Mississippi')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Mississippi')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Mississippi')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'MO':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Missouri')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Missouri')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Missouri')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Missouri')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'MT':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Montana')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Montana')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Montana')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Montana')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'NE':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Nebraska')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Nebraska')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Nebraska')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Nebraska')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'NV':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Nevada')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Nevada')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Nevada')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Nevada')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'NH':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='New Hampshire')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='New Hampshire')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='New Hampshire')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='New Hampshire')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'NJ':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='New Jersey')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='New Jersey')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='New Jersey')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='New Jersey')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'NM':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='New Mexico')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='New Mexico')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='New Mexico')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='New Mexico')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'NY':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='New York')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='New York')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='New York')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='New York')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'NC':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='North Carolina')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='North Carolina')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='North Carolina')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='North Carolina')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'ND':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='North Dakota')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='North Dakota')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='North Dakota')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='North Dakota')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'OH':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Ohio')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Ohio')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Ohio')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Ohio')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'OK':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Oklahoma')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Oklahoma')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Oklahoma')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Oklahoma')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'OR':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Oregon')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Oregon')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Oregon')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Oregon')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'PA':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Pennsylvania')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Pennsylvania')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Pennsylvania')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Pennsylvania')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'RI':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Rhode Island')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Rhode Island')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Rhode Island')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Rhode Island')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'SC':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='South Carolina')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='South Carolina')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='South Carolina')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='South Carolina')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'SD':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='South Dakota')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='South Dakota')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='South Dakota')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='South Dakota')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'TN':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Tennessee')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Tennessee')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Tennessee')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Tennessee')
                    my_total_count = my_total_count.count()


                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'TX':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Texas')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Texas')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Texas')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Texas')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'UT':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Utah')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Utah')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Utah')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Utah')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'VT':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Vermont')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Vermont')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Vermont')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Vermont')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'VA':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Virginia')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Virginia')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Virginia')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Virginia')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'WA':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Washington')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Washington')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Washington')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Washington')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'WV':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='West Virginia')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='West Virginia')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='West Virginia')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='West Virginia')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'WI':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Wisconsin')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Wisconsin')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Wisconsin')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Wisconsin')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'WY':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Wyoming')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Wyoming')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Wyoming')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Wyoming')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'DC':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='District of Columbia')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='District of Columbia')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='District of Columbia')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='District of Columbia')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                else:

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    queryset_list = queryset_list.filter(clinicState__iexact='United States')
                    pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='United States')
                    my_total_count = my_total_count.filter(clinicState__iexact='United States')
                    my_total_count = my_total_count.count()
                    order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                    return render(request, 'search/search.html', context)

            else:
                if 'treatments' in request.GET:
                    treatments = request.GET['treatments']

                    queryset_list = queryset_list.filter(clinicState__iexact='United States')
                    pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='United States')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicState__iexact='United States')

                    if treatments == 'Alltreatmentstrue':
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IVFtreatmenttrue':
                        queryset_list = queryset_list.filter(ivf_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IVFtreatmentmildtrue':

                        queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IVFtreatmentovariantrue':

                        queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'ICSItreatmenttrue':
                        queryset_list = queryset_list.filter(icsi_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Eggdonationrecipientstrue':
                        queryset_list = queryset_list.filter(egg_donor_recipients=True)
                        pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                        ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Spermdonationrecipientstrue':
                        queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                        pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                        ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Embryodonationrecipientstrue':
                        queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                        pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                        ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'EggFreezingtrue':
                        queryset_list = queryset_list.filter(egg_freezing=True)
                        pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                        ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'EmbryoFreezingtrue':
                        queryset_list = queryset_list.filter(embryo_freezing=True)
                        pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                        ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'SpermFreezingtrue':
                        queryset_list = queryset_list.filter(sperm_freezing=True)
                        pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                        ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Surrogacytrue':
                        queryset_list = queryset_list.filter(surrogacy=True)
                        pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                        ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IUItreatmenttrue':
                        queryset_list = queryset_list.filter(iui_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Singlewomantreatmenttrue':
                        queryset_list = queryset_list.filter(single_woman_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'ReciprocalIVFtrue':
                        queryset_list = queryset_list.filter(reciprocal_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                queryset_list = queryset_list.filter(clinicState__iexact='United States')
                pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='United States')
                ppq_queryset_list = ppq_queryset_list.filter(clinicState__iexact='United States')

                my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                paginator = Paginator(order_data, 12)
                page = request.GET.get('page')
                paginationing = paginator.get_page(page)

                context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

            return render(request, 'search/search.html', context)

        elif states == 'UK':

            queryset_list = BasicClinic.objects.all()
            queryset_list = queryset_list.filter(is_published=True).exclude(pro_is_published=True)

            pro_queryset_list = BasicClinic.objects.all()
            pro_queryset_list = pro_queryset_list.filter(pro_is_published=True).exclude(ppq_is_published=True)

            ppq_queryset_list = BasicClinic.objects.all()
            ppq_queryset_list = ppq_queryset_list.filter(ppq_is_published=True)

            my_total_count = BasicClinic.objects.all()
            my_total_count = my_total_count.filter(is_published=True)

            averageIVFPrice = BasicClinic.objects.filter(clinicState__iexact='United Kingdom').aggregate(average=Avg('ivf_treatment_cost'))
            averageEggPrice = BasicClinic.objects.filter(clinicState__iexact='United Kingdom').aggregate(average=Avg('egg_donor_recipients_cost'))
            averageEmbryoPrice = BasicClinic.objects.filter(clinicState__iexact='United Kingdom').aggregate(average=Avg('embryo_donor_recipients_cost'))
            averageSpermPrice = BasicClinic.objects.filter(clinicState__iexact='United Kingdom').aggregate(average=Avg('sperm_donor_recipients_cost'))
            averageICSIPrice = BasicClinic.objects.filter(clinicState__iexact='United Kingdom').aggregate(average=Avg('icsi_treatment_cost'))

            if 'Region' in request.GET:
                region = request.GET['Region']

                queryset_list = queryset_list.filter(clinicState__iexact='United Kingdom')
                pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='United Kingdom')
                ppq_queryset_list = ppq_queryset_list.filter(clinicState__iexact='United Kingdom')

                if region == 'Aberdeen':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Aberdeen')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Aberdeen')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Aberdeen')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Aberdeen')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Bath':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Bath')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Bath')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Bath')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Bath')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Belfast':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Belfast')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Belfast')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Belfast')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Belfast')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Birmingham':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Birmingham')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Birmingham')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Birmingham')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Birmingham')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Bournemouth':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Bournemouth')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Bournemouth')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Bournemouth')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Bournemouth')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'BrightonHove':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='BrightonHove')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='BrightonHove')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='BrightonHove')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='BrightonHove')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Bristol':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Bristol')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Bristol')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Bristol')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Bristol')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Cambridge':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Cambridge')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Cambridge')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Cambridge')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Cambridge')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Cardiff':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Cardiff')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Cardiff')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Cardiff')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Cardiff')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Colchester':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Colchester')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Colchester')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Colchester')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Colchester')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Derby':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Derby')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Derby')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Derby')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Derby')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Exeter':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Exeter')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Exeter')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Exeter')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Exeter')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Glasgow':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Glasgow')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Glasgow')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Glasgow')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Glasgow')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Hull':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Hull')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Hull')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Hull')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Hull')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Chelmsford':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Chelmsford')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Chelmsford')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Chelmsford')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Chelmsford')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Leeds':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Leeds')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Leeds')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Leeds')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Leeds')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Leicester':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Leicester')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Leicester')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Leicester')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Leicester')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Liverpool':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Liverpool')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Liverpool')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Liverpool')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Liverpool')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'London':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='London')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='London')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='London')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='London')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Manchester':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Manchester')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Manchester')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Manchester')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Manchester')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Middlesbrough':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Middlesbrough')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Middlesbrough')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Middlesbrough')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Middlesbrough')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Newcastle':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Newcastle')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Newcastle')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Newcastle')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Newcastle')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Norwich':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Norwich')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Norwich')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Norwich')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Norwich')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Nottingham':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Nottingham')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Nottingham')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Nottingham')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Nottingham')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Oxford':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Oxford')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Oxford')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Oxford')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Oxford')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Peterborough':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Peterborough')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Peterborough')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Peterborough')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Peterborough')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Plymouth':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Plymouth')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Plymouth')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Plymouth')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Plymouth')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Portsmouth':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Portsmouth')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Portsmouth')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Portsmouth')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Portsmouth')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Salisbury':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Salisbury')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Salisbury')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Salisbury')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Salisbury')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Sheffield':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Sheffield')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Sheffield')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Sheffield')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Sheffield')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Southampton':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Southampton')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Southampton')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Southampton')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Southampton')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Swansea':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Swansea')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Swansea')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Swansea')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Swansea')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                else:

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    queryset_list = queryset_list.filter(clinicState__iexact='United Kingdom')
                    pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='United Kingdom')
                    my_total_count = my_total_count.filter(clinicState__iexact='United Kingdom')
                    my_total_count = my_total_count.count()
                    order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                    return render(request, 'search/search.html', context)

            else:
                if 'treatments' in request.GET:

                    treatments = request.GET['treatments']

                    queryset_list = queryset_list.filter(clinicState__iexact='United Kingdom')
                    pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='United Kingdom')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicState__iexact='United Kingdom')

                    if treatments == 'Alltreatmentstrue':
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IVFtreatmenttrue':
                        queryset_list = queryset_list.filter(ivf_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IVFtreatmentmildtrue':

                        queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IVFtreatmentovariantrue':

                        queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'ICSItreatmenttrue':
                        queryset_list = queryset_list.filter(icsi_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Eggdonationrecipientstrue':
                        queryset_list = queryset_list.filter(egg_donor_recipients=True)
                        pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                        ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Spermdonationrecipientstrue':
                        queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                        pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                        ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Embryodonationrecipientstrue':
                        queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                        pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                        ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'EggFreezingtrue':
                        queryset_list = queryset_list.filter(egg_freezing=True)
                        pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                        ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'EmbryoFreezingtrue':
                        queryset_list = queryset_list.filter(sperm_freezing=True)
                        pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                        ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'SpermFreezingtrue':
                        queryset_list = queryset_list.filter(fertility_preservation=True)
                        pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                        ppq_queryset_list = ppq_queryset_list.filter(fertility_preservation=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Surrogacytrue':
                        queryset_list = queryset_list.filter(surrogacy=True)
                        pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                        ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IUItreatmenttrue':
                        queryset_list = queryset_list.filter(iui_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}
                        return render(request, 'search/search.html', context)

                    elif treatments == 'Singlewomantreatmenttrue':
                        queryset_list = queryset_list.filter(single_woman_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'ReciprocalIVFtrue':
                        queryset_list = queryset_list.filter(reciprocal_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

            queryset_list = queryset_list.filter(clinicState__iexact='United Kingdom')
            pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='United Kingdom')
            ppq_queryset_list = ppq_queryset_list.filter(clinicState__iexact='United Kingdom')

            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

            paginator = Paginator(order_data, 12)
            page = request.GET.get('page')
            paginationing = paginator.get_page(page)

            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

            return render(request, 'search/search.html', context)

        elif states == 'CZ':

            queryset_list = BasicClinic.objects.all()
            queryset_list = queryset_list.filter(is_published=True).exclude(pro_is_published=True)

            pro_queryset_list = BasicClinic.objects.all()
            pro_queryset_list = pro_queryset_list.filter(pro_is_published=True).exclude(ppq_is_published=True)

            ppq_queryset_list = BasicClinic.objects.all()
            ppq_queryset_list = ppq_queryset_list.filter(ppq_is_published=True)

            my_total_count = BasicClinic.objects.all()
            my_total_count = my_total_count.filter(clinicState__iexact='Czech Republic')
            my_total_count = my_total_count.filter(is_published=True)

            averageIVFPrice = BasicClinic.objects.filter(clinicState__iexact='Czech Republic').aggregate(average=Avg('ivf_treatment_cost'))
            averageEggPrice = BasicClinic.objects.filter(clinicState__iexact='Czech Republic').aggregate(average=Avg('egg_donor_recipients_cost'))
            averageEmbryoPrice = BasicClinic.objects.filter(clinicState__iexact='Czech Republic').aggregate(average=Avg('embryo_donor_recipients_cost'))
            averageSpermPrice = BasicClinic.objects.filter(clinicState__iexact='Czech Republic').aggregate(average=Avg('sperm_donor_recipients_cost'))
            averageICSIPrice = BasicClinic.objects.filter(clinicState__iexact='Czech Republic').aggregate(average=Avg('icsi_treatment_cost'))

            if 'Region' in request.GET:
                region = request.GET['Region']

                queryset_list = queryset_list.filter(clinicState__iexact='Czech Republic')
                pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='Czech Republic')
                ppq_queryset_list = ppq_queryset_list.filter(clinicState__iexact='Czech Republic')

                if region == 'Prague':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Prague')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Prague')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Prague')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Prague')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Brno':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Brno')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Brno')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Brno')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Brno')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                else:

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    queryset_list = queryset_list.filter(clinicState__iexact='Czech Republic')
                    pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='Czech Republic')
                    my_total_count = my_total_count.filter(clinicState__iexact='Czech Republic')
                    my_total_count = my_total_count.count()
                    order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                    return render(request, 'search/search.html', context)

            else:
                if 'treatments' in request.GET:

                    treatments = request.GET['treatments']

                    queryset_list = queryset_list.filter(clinicState__iexact='Czech Republic')
                    pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='Czech Republic')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicState__iexact='Czech Republic')

                    if treatments == 'Alltreatmentstrue':
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IVFtreatmenttrue':
                        queryset_list = queryset_list.filter(ivf_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IVFtreatmentmildtrue':

                        queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IVFtreatmentovariantrue':

                        queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'ICSItreatmenttrue':
                        queryset_list = queryset_list.filter(icsi_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Eggdonationrecipientstrue':
                        queryset_list = queryset_list.filter(egg_donor_recipients=True)
                        pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                        ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Spermdonationrecipientstrue':
                        queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                        pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                        ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Embryodonationrecipientstrue':
                        queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                        pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                        ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'EggFreezingtrue':
                        queryset_list = queryset_list.filter(egg_freezing=True)
                        pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                        ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'EmbryoFreezingtrue':
                        queryset_list = queryset_list.filter(sperm_freezing=True)
                        pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                        ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'SpermFreezingtrue':
                        queryset_list = queryset_list.filter(fertility_preservation=True)
                        pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                        ppq_queryset_list = ppq_queryset_list.filter(fertility_preservation=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Surrogacytrue':
                        queryset_list = queryset_list.filter(surrogacy=True)
                        pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                        ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IUItreatmenttrue':
                        queryset_list = queryset_list.filter(iui_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}
                        return render(request, 'search/search.html', context)

                    elif treatments == 'Singlewomantreatmenttrue':
                        queryset_list = queryset_list.filter(single_woman_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'ReciprocalIVFtrue':
                        queryset_list = queryset_list.filter(reciprocal_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                queryset_list = queryset_list.filter(clinicState__iexact='Czech Republic')
                pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='Czech Republic')
                ppq_queryset_list = ppq_queryset_list.filter(clinicState__iexact='Czech Republic')

                order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                paginator = Paginator(order_data, 12)
                page = request.GET.get('page')
                paginationing = paginator.get_page(page)

                context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                return render(request, 'search/search.html', context)

            queryset_list = queryset_list.filter(clinicState__iexact='Czech Republic')
            pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='Czech Republic')
            ppq_queryset_list = ppq_queryset_list.filter(clinicState__iexact='Czech Republic')

            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

            paginator = Paginator(order_data, 12)
            page = request.GET.get('page')
            paginationing = paginator.get_page(page)

            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

            return render(request, 'search/search.html', context)

        elif states == 'SP':

            queryset_list = BasicClinic.objects.all()
            queryset_list = queryset_list.filter(is_published=True).exclude(pro_is_published=True)

            pro_queryset_list = BasicClinic.objects.all()
            pro_queryset_list = pro_queryset_list.filter(pro_is_published=True).exclude(ppq_is_published=True)

            ppq_queryset_list = BasicClinic.objects.all()
            ppq_queryset_list = ppq_queryset_list.filter(ppq_is_published=True)

            my_total_count = BasicClinic.objects.all()
            my_total_count = my_total_count.filter(clinicState__iexact='Spain')
            my_total_count = my_total_count.filter(is_published=True)

            averageIVFPrice = BasicClinic.objects.filter(clinicState__iexact='Spain').aggregate(average=Avg('ivf_treatment_cost'))
            averageEggPrice = BasicClinic.objects.filter(clinicState__iexact='Spain').aggregate(average=Avg('egg_donor_recipients_cost'))
            averageEmbryoPrice = BasicClinic.objects.filter(clinicState__iexact='Spain').aggregate(average=Avg('embryo_donor_recipients_cost'))
            averageSpermPrice = BasicClinic.objects.filter(clinicState__iexact='Spain').aggregate(average=Avg('sperm_donor_recipients_cost'))
            averageICSIPrice = BasicClinic.objects.filter(clinicState__iexact='Spain').aggregate(average=Avg('icsi_treatment_cost'))

            if 'Region' in request.GET:
                region = request.GET['Region']

                queryset_list = queryset_list.filter(clinicState__iexact='Spain')
                pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='Spain')
                ppq_queryset_list = ppq_queryset_list.filter(clinicState__iexact='Spain')

                if region == 'Alicante':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Alicante')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Alicante')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Alicante')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Alicante')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Barcelona':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Barcelona')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Barcelona')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Barcelona')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Barcelona')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Madrid':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Madrid')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Madrid')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Madrid')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Madrid')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Malaga':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Malaga')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Malaga')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Malaga')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Malaga')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Seville':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Seville')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Seville')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Seville')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Seville')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                elif region == 'Valencia':
                    queryset_list = queryset_list.filter(clinicRegion__iexact='Valencia')
                    pro_queryset_list = pro_queryset_list.filter(clinicRegion__iexact='Valencia')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicRegion__iexact='Valencia')

                    my_total_count = my_total_count.filter(clinicRegion__iexact='Valencia')
                    my_total_count = my_total_count.count()

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':

                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':

                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':


                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':


                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':


                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':


                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':


                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':


                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':


                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':


                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                else:

                    pro_queryset_list = pro_queryset_list.order_by('?')
                    ppq_queryset_list = ppq_queryset_list.order_by('?')

                    if 'treatments' in request.GET:
                        treatments = request.GET['treatments']

                        if treatments == 'Alltreatmentstrue':
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmenttrue':
                            queryset_list = queryset_list.filter(ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentmildtrue':

                            queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IVFtreatmentovariantrue':

                            queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ICSItreatmenttrue':
                            queryset_list = queryset_list.filter(icsi_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Eggdonationrecipientstrue':
                            queryset_list = queryset_list.filter(egg_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Spermdonationrecipientstrue':
                            queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Embryodonationrecipientstrue':
                            queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EggFreezingtrue':
                            queryset_list = queryset_list.filter(egg_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'EmbryoFreezingtrue':
                            queryset_list = queryset_list.filter(embryo_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(embryo_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'SpermFreezingtrue':
                            queryset_list = queryset_list.filter(sperm_freezing=True)
                            pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Surrogacytrue':
                            queryset_list = queryset_list.filter(surrogacy=True)
                            pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'IUItreatmenttrue':
                            queryset_list = queryset_list.filter(iui_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'Singlewomantreatmenttrue':
                            queryset_list = queryset_list.filter(single_woman_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        elif treatments == 'ReciprocalIVFtrue':
                            queryset_list = queryset_list.filter(reciprocal_treatment=True)
                            pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                        else:
                            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                            paginator = Paginator(order_data, 12)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                            return render(request, 'search/search.html', context)

                    queryset_list = queryset_list.filter(clinicState__iexact='Spain')
                    pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='Spain')
                    my_total_count = my_total_count.filter(clinicState__iexact='Spain')
                    my_total_count = my_total_count.count()
                    order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)


                    paginator = Paginator(order_data, 12)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                    return render(request, 'search/search.html', context)

            else:
                if 'treatments' in request.GET:

                    treatments = request.GET['treatments']

                    queryset_list = queryset_list.filter(clinicState__iexact='Spain')
                    pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='Spain')
                    ppq_queryset_list = ppq_queryset_list.filter(clinicState__iexact='Spain')

                    if treatments == 'Alltreatmentstrue':
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IVFtreatmenttrue':
                        queryset_list = queryset_list.filter(ivf_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(ivf_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(ivf_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IVFtreatmentmildtrue':

                        queryset_list = queryset_list.filter(mild_ivf_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(mild_ivf_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(mild_ivf_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IVFtreatmentovariantrue':

                        queryset_list = queryset_list.filter(ovarian_ivf_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(ovarian_ivf_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(ovarian_ivf_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'ICSItreatmenttrue':
                        queryset_list = queryset_list.filter(icsi_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(icsi_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(icsi_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Eggdonationrecipientstrue':
                        queryset_list = queryset_list.filter(egg_donor_recipients=True)
                        pro_queryset_list = pro_queryset_list.filter(egg_donor_recipients=True)
                        ppq_queryset_list = ppq_queryset_list.filter(egg_donor_recipients=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Spermdonationrecipientstrue':
                        queryset_list = queryset_list.filter(sperm_donor_recipients=True)
                        pro_queryset_list = pro_queryset_list.filter(sperm_donor_recipients=True)
                        ppq_queryset_list = ppq_queryset_list.filter(sperm_donor_recipients=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Embryodonationrecipientstrue':
                        queryset_list = queryset_list.filter(embryo_donor_recipients=True)
                        pro_queryset_list = pro_queryset_list.filter(embryo_donor_recipients=True)
                        ppq_queryset_list = ppq_queryset_list.filter(embryo_donor_recipients=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'EggFreezingtrue':
                        queryset_list = queryset_list.filter(egg_freezing=True)
                        pro_queryset_list = pro_queryset_list.filter(egg_freezing=True)
                        ppq_queryset_list = ppq_queryset_list.filter(egg_freezing=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'EmbryoFreezingtrue':
                        queryset_list = queryset_list.filter(sperm_freezing=True)
                        pro_queryset_list = pro_queryset_list.filter(sperm_freezing=True)
                        ppq_queryset_list = ppq_queryset_list.filter(sperm_freezing=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'SpermFreezingtrue':
                        queryset_list = queryset_list.filter(fertility_preservation=True)
                        pro_queryset_list = pro_queryset_list.filter(fertility_preservation=True)
                        ppq_queryset_list = ppq_queryset_list.filter(fertility_preservation=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'Surrogacytrue':
                        queryset_list = queryset_list.filter(surrogacy=True)
                        pro_queryset_list = pro_queryset_list.filter(surrogacy=True)
                        ppq_queryset_list = ppq_queryset_list.filter(surrogacy=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'IUItreatmenttrue':
                        queryset_list = queryset_list.filter(iui_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(iui_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(iui_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}
                        return render(request, 'search/search.html', context)

                    elif treatments == 'Singlewomantreatmenttrue':
                        queryset_list = queryset_list.filter(single_woman_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(single_woman_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(single_woman_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    elif treatments == 'ReciprocalIVFtrue':
                        queryset_list = queryset_list.filter(reciprocal_treatment=True)
                        pro_queryset_list = pro_queryset_list.filter(reciprocal_treatment=True)
                        ppq_queryset_list = ppq_queryset_list.filter(reciprocal_treatment=True)

                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                    else:
                        order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                        my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                        paginator = Paginator(order_data, 12)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                        return render(request, 'search/search.html', context)

                queryset_list = queryset_list.filter(clinicState__iexact='Spain')
                pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='Spain')
                ppq_queryset_list = ppq_queryset_list.filter(clinicState__iexact='Spain')

                order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

                my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

                paginator = Paginator(order_data, 12)
                page = request.GET.get('page')
                paginationing = paginator.get_page(page)

                context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

                return render(request, 'search/search.html', context)

            queryset_list = queryset_list.filter(clinicState__iexact='Spain')
            pro_queryset_list = pro_queryset_list.filter(clinicState__iexact='Spain')
            ppq_queryset_list = ppq_queryset_list.filter(clinicState__iexact='Spain')

            order_data = list(ppq_queryset_list) + list(pro_queryset_list) + list(queryset_list)

            my_total_count = queryset_list.count() + pro_queryset_list.count() + ppq_queryset_list.count()

            paginator = Paginator(order_data, 12)
            page = request.GET.get('page')
            paginationing = paginator.get_page(page)

            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

            return render(request, 'search/search.html', context)

        else:
            context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

            return render(request, 'search/search.html', context)

    else:
        context = {'listings': queryset_list, 'pro_listings': pro_queryset_list, 'order_data': paginationing, 'paginationing': paginationing, 'averageIVFPrice': averageIVFPrice, 'averageEggPrice': averageEggPrice, 'averageEmbryoPrice': averageEmbryoPrice, 'averageSpermPrice': averageSpermPrice, 'averageICSIPrice': averageICSIPrice, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'my_total_count': my_total_count, 'values': request.GET,}

        return render(request, 'search/search.html', context)
