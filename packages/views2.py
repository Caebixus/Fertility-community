from django.shortcuts import render, redirect, get_object_or_404
from django.http import (HttpResponse, HttpResponseNotFound, Http404,
HttpResponseRedirect, HttpResponsePermanentRedirect)
from django.urls import reverse
from django.core.paginator import Paginator
from location.currencies import gbpToEur, gbpToUsd, gbpToInr, usdToGbp, usdToEur, usdToInr, eurToGbp, eurToUsd, eurToInr, inrToGbp, inrToEur, inrToUsd
from .packageChoices import CATEGORY_PACKAGE, CATEGORY_CHOICES_STATES
from blog.models import Blog
from django import template
from contact.forms import WebsiteForm
from django.core.mail import send_mail
from django.contrib import messages, auth
from clinic.models import BasicClinic
from .models import Package
from datetime import datetime, timedelta
from django.utils import timezone
from search.choices import CATEGORY_CHOICES_US_REGION, CATEGORY_CHOICES_MX_CITIES, CATEGORY_CHOICES_UK_CITIES, CATEGORY_CHOICES_CZ_CITIES, CATEGORY_CHOICES_SP_CITIES, CATEGORY_CHOICES_IN_CITIES, CATEGORY_CHOICES_GR_CITIES, CATEGORY_CHOICES_CY_CITIES, AL_CITIES, AZ_CITIES, CA_CITIES, CO_CITIES, CT_CITIES, DE_CITIES, FL_CITIES, GA_CITIES, HI_CITIES, IL_CITIES, IN_CITIES, KY_CITIES, LA_CITIES, ME_CITIES, MA_CITIES, MO_CITIES, NV_CITIES, NJ_CITIES, NY_CITIES, NC_CITIES, OH_CITIES, OK_CITIES, OR_CITIES, PA_CITIES, TN_CITIES, TX_CITIES, VA_CITIES, WA_CITIES



def packagesearch(request):
    todayDate = timezone.now()
    blog = Blog.objects.filter(tag__iexact='IVF Packages').order_by('-created_at')
    alllisting = Package.objects.all().exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
    countall = alllisting.count()

    if 'States' in request.GET:
        states = request.GET['States']
        if states == 'US':
            if 'Region' in request.GET:
                region = request.GET['Region']
                if region == 'AL':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alabama').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alabama').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alabama', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alabama', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alabama', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alabama', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alabama', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alabama', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alabama', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alabama', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alabama', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alabama', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alabama').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alabama').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alabama').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alabama').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'AK':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alaska').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alaska').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alaska', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alaska', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alaska', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alaska', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alaska', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alaska', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alaska', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alaska', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alaska', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alaska', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alaska').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alaska').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alaska').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alaska').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'AZ':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arizona').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arizona').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arizona', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arizona', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arizona', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arizona', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arizona', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arizona', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arizona', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arizona', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arizona', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arizona', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arizona').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arizona').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arizona').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arizona').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'AR':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arkansas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arkansas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arkansas', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arkansas', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arkansas', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arkansas', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arkansas', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arkansas', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arkansas', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arkansas', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arkansas', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arkansas', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arkansas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arkansas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Arkansas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Arkansas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'CA':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='California').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='California').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='California', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='California', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='California', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='California', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='California', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='California', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='California', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='California', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='California', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='California', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='California').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='California').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='California').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='California').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'CO':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colorado').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colorado').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colorado', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colorado', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colorado', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colorado', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colorado', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colorado', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colorado', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colorado', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colorado', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colorado', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colorado').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colorado').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colorado').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colorado').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'CT':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Connecticut').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Connecticut').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Connecticut', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Connecticut', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Connecticut', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Connecticut', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Connecticut', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Connecticut', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Connecticut', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Connecticut', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Connecticut', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Connecticut', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Connecticut').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Connecticut').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Connecticut').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Connecticut').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'DE':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Delaware').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Delaware').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Delaware', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Delaware', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Delaware', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Delaware', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Delaware', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Delaware', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Delaware', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Delaware', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Delaware', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Delaware', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Delaware').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Delaware').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Delaware').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Delaware').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'FL':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Florida').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Florida').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Florida', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Florida', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Florida', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Florida', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Florida', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Florida', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Florida', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Florida', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Florida', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Florida', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Florida').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Florida').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Florida').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Florida').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'GA':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Georgia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Georgia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Georgia', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Georgia', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Georgia', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Georgia', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Georgia', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Georgia', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Georgia', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Georgia', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Georgia', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Georgia', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Georgia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Georgia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Georgia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Georgia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'HI':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hawaii').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hawaii').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hawaii', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hawaii', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hawaii', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hawaii', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hawaii', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hawaii', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hawaii', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hawaii', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hawaii', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hawaii', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hawaii').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hawaii').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hawaii').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hawaii').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'ID':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Idaho').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Idaho').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Idaho', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Idaho', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Idaho', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Idaho', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Idaho', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Idaho', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Idaho', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Idaho', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Idaho', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Idaho', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Idaho').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Idaho').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Idaho').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Idaho').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'IL':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Illinois').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Illinois').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Illinois', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Illinois', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Illinois', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Illinois', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Illinois', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Illinois', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Illinois', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Illinois', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Illinois', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Illinois', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Illinois').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Illinois').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Illinois').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Illinois').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'IN':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indiana', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indiana', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indiana', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indiana', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indiana', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indiana', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indiana', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indiana', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indiana', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indiana', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'IA':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Iowa').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Iowa').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Iowa', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Iowa', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Iowa', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Iowa', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Iowa', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Iowa', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Iowa', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Iowa', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Iowa', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Iowa', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Iowa').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Iowa').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Iowa').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Iowa').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'KS':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kansas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kansas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kansas', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kansas', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kansas', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kansas', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kansas', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kansas', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kansas', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kansas', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kansas', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kansas', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kansas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kansas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kansas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kansas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'KY':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kentucky').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kentucky').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kentucky', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kentucky', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kentucky', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kentucky', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kentucky', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kentucky', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kentucky', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kentucky', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kentucky', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kentucky', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kentucky').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kentucky').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kentucky').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kentucky').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'LA':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Louisiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Louisiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Louisiana', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Louisiana', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Louisiana', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Louisiana', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Louisiana', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Louisiana', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Louisiana', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Louisiana', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Louisiana', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Louisiana', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Louisiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Louisiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Louisiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Louisiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'ME':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maine').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maine').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maine', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maine', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maine', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maine', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maine', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maine', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maine', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maine', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maine', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maine', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maine').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maine').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maine').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maine').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'MD':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maryland').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maryland').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maryland', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maryland', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maryland', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maryland', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maryland', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maryland', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maryland', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maryland', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maryland', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maryland', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maryland').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maryland').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Maryland').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Maryland').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'MA':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Massachusetts').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'MI':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Michigan').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Michigan').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Michigan', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Michigan', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Michigan', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Michigan', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Michigan', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Michigan', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Michigan', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Michigan', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Michigan', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Michigan', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Michigan').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Michigan').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Michigan').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Michigan').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'MN':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Minnesota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Minnesota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Minnesota', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Minnesota', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Minnesota', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Minnesota', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Minnesota', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Minnesota', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Minnesota', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Minnesota', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Minnesota', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Minnesota', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Minnesota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Minnesota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Minnesota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Minnesota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'MS':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mississippi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mississippi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mississippi', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mississippi', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mississippi', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mississippi', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mississippi', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mississippi', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mississippi', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mississippi', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mississippi', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mississippi', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mississippi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mississippi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mississippi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mississippi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'MO':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Missouri').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Missouri').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Missouri', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Missouri', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Missouri', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Missouri', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Missouri', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Missouri', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Missouri', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Missouri', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Missouri', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Missouri', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Missouri').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Missouri').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Missouri').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Missouri').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'MT':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Montana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Montana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Montana', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Montana', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Montana', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Montana', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Montana', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Montana', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Montana', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Montana', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Montana', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Montana', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Montana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Montana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Montana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Montana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'NE':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nebraska').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nebraska').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nebraska', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nebraska', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nebraska', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nebraska', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nebraska', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nebraska', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nebraska', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nebraska', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nebraska', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nebraska', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nebraska').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nebraska').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nebraska').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nebraska').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'NH':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Hampshire').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'NJ':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Jersey').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Jersey').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Jersey', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Jersey', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Jersey', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Jersey', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Jersey', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Jersey', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Jersey', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Jersey', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Jersey', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Jersey', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Jersey').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Jersey').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Jersey').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Jersey').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'NM':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Mexico', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Mexico', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Mexico', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Mexico', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Mexico', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Mexico', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Mexico', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Mexico', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Mexico', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Mexico', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'NY':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New York').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New York').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New York', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New York', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New York', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New York', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New York', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New York', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New York', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New York', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New York', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New York', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New York').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New York').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New York').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New York').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'NC':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Carolina').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Carolina').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Carolina', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Carolina', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Carolina', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Carolina', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Carolina', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Carolina', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Carolina', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Carolina', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Carolina', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Carolina', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Carolina').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Carolina').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Carolina').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Carolina').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'ND':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Dakota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Dakota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Dakota', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Dakota', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Dakota', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Dakota', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Dakota', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Dakota', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Dakota', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Dakota', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Dakota', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Dakota', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Dakota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Dakota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='North Dakota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='North Dakota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'NV':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nevada').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nevada').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nevada', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nevada', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nevada', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nevada', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nevada', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nevada', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nevada', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nevada', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nevada', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nevada', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nevada').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nevada').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nevada').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nevada').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'OH':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ohio').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ohio').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ohio', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ohio', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ohio', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ohio', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ohio', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ohio', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ohio', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ohio', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ohio', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ohio', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ohio').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ohio').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ohio').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ohio').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'OK':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oklahoma').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'OR':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oregon').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oregon').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oregon', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oregon', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oregon', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oregon', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oregon', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oregon', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oregon', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oregon', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oregon', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oregon', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oregon').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oregon').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oregon').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oregon').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'PA':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pennsylvania').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'PR':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Puerto Rico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'RI':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rhode Island').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'SC':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Carolina').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Carolina').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Carolina', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Carolina', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Carolina', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Carolina', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Carolina', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Carolina', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Carolina', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Carolina', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Carolina', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Carolina', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Carolina').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Carolina').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Carolina').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Carolina').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'SD':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Dakota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Dakota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Dakota', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Dakota', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Dakota', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Dakota', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Dakota', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Dakota', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Dakota', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Dakota', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Dakota', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Dakota', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Dakota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Dakota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='South Dakota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='South Dakota').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'TN':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Tennessee').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Tennessee').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Tennessee', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Tennessee', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Tennessee', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Tennessee', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Tennessee', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Tennessee', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Tennessee', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Tennessee', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Tennessee', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Tennessee', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Tennessee').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Tennessee').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Tennessee').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Tennessee').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'TX':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Texas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Texas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Texas', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Texas', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Texas', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Texas', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Texas', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Texas', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Texas', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Texas', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Texas', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Texas', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Texas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Texas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Texas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Texas').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'UT':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Utah').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Utah').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Utah', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Utah', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Utah', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Utah', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Utah', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Utah', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Utah', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Utah', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Utah', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Utah', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Utah').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Utah').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Utah').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Utah').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'VT':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vermont').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vermont').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vermont', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vermont', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vermont', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vermont', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vermont', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vermont', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vermont', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vermont', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vermont', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vermont', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vermont').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vermont').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vermont').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vermont').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'VA':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Virginia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Virginia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Virginia', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Virginia', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Virginia', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Virginia', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Virginia', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Virginia', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Virginia', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Virginia', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Virginia', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Virginia', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Virginia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Virginia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Virginia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Virginia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'WA':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Washington').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Washington').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Washington', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Washington', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Washington', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Washington', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Washington', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Washington', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Washington', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Washington', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Washington', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Washington', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Washington').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Washington').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Washington').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Washington').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'WV':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='West Virginia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='West Virginia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='West Virginia', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='West Virginia', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='West Virginia', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='West Virginia', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='West Virginia', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='West Virginia', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='West Virginia', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='West Virginia', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='West Virginia', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='West Virginia', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='West Virginia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='West Virginia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='West Virginia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='West Virginia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'WI':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wisconsin').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'WY':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wyoming').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wyoming').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wyoming', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wyoming', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wyoming', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wyoming', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wyoming', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wyoming', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wyoming', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wyoming', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wyoming', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wyoming', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wyoming').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wyoming').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Wyoming').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Wyoming').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'DC':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='District of Columbia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                else:
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
            elif 'packages' in request.GET:
                packages = request.GET['packages']
                if packages == 'Allpackagestrue':
                    todayDate = timezone.now()

                    listing = Package.objects.all()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'NaturalIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'MildMiniIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'StandardIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Eggdonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Embryodonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                else:
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
            else:
                todayDate = timezone.now()
                prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United States').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United States').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                count = prolisting.count() + ppqlisting.count()

                prolisting = prolisting.order_by('package_end_list_date')
                ppqlisting = ppqlisting.order_by('package_end_list_date')

                order_data = list(ppqlisting) + list(prolisting)

                paginator = Paginator(order_data, 50)
                page = request.GET.get('page')
                paginationing = paginator.get_page(page)

                context = {
                    'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                }

                return render(request, 'packages/package-search.html', context)
        elif states == 'UK':
            if 'Region' in request.GET:
                region = request.GET['Region']
                if region == 'Aberdeen':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Aberdeen').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Bath':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bath').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bath').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bath', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bath', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bath', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bath', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bath', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bath', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bath', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bath', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bath', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bath', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bath').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bath').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bath').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bath').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Belfast':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Belfast').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Belfast').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Belfast', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Belfast', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Belfast', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Belfast', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Belfast', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Belfast', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Belfast', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Belfast', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Belfast', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Belfast', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Belfast').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Belfast').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Belfast').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Belfast').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Birmingham':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Birmingham').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Birmingham').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Birmingham', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Birmingham', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Birmingham', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Birmingham', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Birmingham', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Birmingham', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Birmingham', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Birmingham', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Birmingham', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Birmingham', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Birmingham').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Birmingham').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Birmingham').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Birmingham').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Bournemouth':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bournemouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Brighton':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brighton').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brighton').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brighton', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brighton', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brighton', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brighton', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brighton', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brighton', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brighton', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brighton', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brighton', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brighton', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brighton').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brighton').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brighton').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brighton').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Bristol':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bristol').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bristol').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bristol', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bristol', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bristol', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bristol', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bristol', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bristol', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bristol', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bristol', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bristol', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bristol', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bristol').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bristol').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bristol').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bristol').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Cambridge':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cambridge').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cambridge').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cambridge', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cambridge', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cambridge', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cambridge', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cambridge', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cambridge', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cambridge', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cambridge', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cambridge', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cambridge', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cambridge').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cambridge').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cambridge').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cambridge').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Cardiff':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cardiff').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cardiff').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cardiff', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cardiff', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cardiff', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cardiff', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cardiff', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cardiff', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cardiff', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cardiff', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cardiff', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cardiff', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cardiff').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cardiff').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cardiff').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cardiff').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Colchester':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colchester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colchester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colchester', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colchester', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colchester', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colchester', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colchester', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colchester', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colchester', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colchester', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colchester', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colchester', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colchester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colchester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Colchester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Colchester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Derby':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Derby').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Derby').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Derby', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Derby', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Derby', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Derby', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Derby', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Derby', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Derby', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Derby', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Derby', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Derby', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Derby').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Derby').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Derby').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Derby').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Exeter':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Exeter').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Exeter').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Exeter', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Exeter', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Exeter', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Exeter', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Exeter', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Exeter', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Exeter', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Exeter', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Exeter', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Exeter', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Exeter').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Exeter').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Exeter').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Exeter').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Glasgow':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Glasgow').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Glasgow').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Glasgow', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Glasgow', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Glasgow', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Glasgow', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Glasgow', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Glasgow', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Glasgow', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Glasgow', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Glasgow', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Glasgow', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Glasgow').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Glasgow').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Glasgow').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Glasgow').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Hull':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hull').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hull').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hull', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hull', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hull', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hull', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hull', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hull', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hull', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hull', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hull', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hull', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hull').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hull').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hull').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hull').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Chelmsford':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chelmsford').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Leeds':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leeds').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leeds').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leeds', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leeds', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leeds', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leeds', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leeds', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leeds', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leeds', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leeds', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leeds', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leeds', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leeds').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leeds').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leeds').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leeds').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Leicester':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leicester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leicester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leicester', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leicester', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leicester', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leicester', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leicester', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leicester', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leicester', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leicester', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leicester', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leicester', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leicester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leicester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Leicester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Leicester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Liverpool':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Liverpool').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Liverpool').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Liverpool', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Liverpool', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Liverpool', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Liverpool', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Liverpool', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Liverpool', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Liverpool', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Liverpool', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Liverpool', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Liverpool', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Liverpool').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Liverpool').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Liverpool').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Liverpool').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'London':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='London').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='London').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='London', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='London', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='London', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='London', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='London', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='London', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='London', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='London', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='London', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='London', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='London').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='London').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='London').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='London').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Manchester':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Manchester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Manchester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Manchester', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Manchester', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Manchester', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Manchester', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Manchester', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Manchester', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Manchester', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Manchester', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Manchester', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Manchester', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Manchester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Manchester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Manchester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Manchester').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Middlesbrough':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Middlesbrough').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Newcastle':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Newcastle').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Newcastle').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Newcastle', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Newcastle', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Newcastle', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Newcastle', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Newcastle', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Newcastle', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Newcastle', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Newcastle', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Newcastle', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Newcastle', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Newcastle').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Newcastle').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Newcastle').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Newcastle').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Norwich':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Norwich').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Norwich').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Norwich', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Norwich', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Norwich', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Norwich', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Norwich', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Norwich', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Norwich', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Norwich', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Norwich', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Norwich', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Norwich').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Norwich').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Norwich').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Norwich').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Nottingham':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nottingham').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nottingham').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nottingham', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nottingham', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nottingham', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nottingham', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nottingham', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nottingham', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nottingham', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nottingham', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nottingham', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nottingham', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nottingham').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nottingham').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nottingham').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nottingham').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Oxford':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oxford').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oxford').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oxford', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oxford', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oxford', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oxford', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oxford', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oxford', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oxford', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oxford', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oxford', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oxford', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oxford').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oxford').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Oxford').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Oxford').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Peterborough':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Peterborough').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Peterborough').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Peterborough', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Peterborough', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Peterborough', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Peterborough', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Peterborough', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Peterborough', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Peterborough', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Peterborough', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Peterborough', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Peterborough', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Peterborough').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Peterborough').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Peterborough').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Peterborough').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Plymouth':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Plymouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Plymouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Plymouth', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Plymouth', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Plymouth', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Plymouth', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Plymouth', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Plymouth', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Plymouth', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Plymouth', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Plymouth', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Plymouth', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Plymouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Plymouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Plymouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Plymouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Portsmouth':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Portsmouth').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Salisbury':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Salisbury').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Salisbury').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Salisbury', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Salisbury', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Salisbury', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Salisbury', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Salisbury', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Salisbury', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Salisbury', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Salisbury', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Salisbury', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Salisbury', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Salisbury').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Salisbury').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Salisbury').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Salisbury').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Sheffield':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Sheffield').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Sheffield').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Sheffield', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Sheffield', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Sheffield', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Sheffield', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Sheffield', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Sheffield', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Sheffield', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Sheffield', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Sheffield', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Sheffield', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Sheffield').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Sheffield').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Sheffield').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Sheffield').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Southampton':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Southampton').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Southampton').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Southampton', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Southampton', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Southampton', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Southampton', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Southampton', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Southampton', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Southampton', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Southampton', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Southampton', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Southampton', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Southampton').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Southampton').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Southampton').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Southampton').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Swansea':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Swansea').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Swansea').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Swansea', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Swansea', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Swansea', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Swansea', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Swansea', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Swansea', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Swansea', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Swansea', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Swansea', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Swansea', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Swansea').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Swansea').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Swansea').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Swansea').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                else:
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
            elif 'packages' in request.GET:
                packages = request.GET['packages']
                if packages == 'Allpackagestrue':
                    todayDate = timezone.now()

                    listing = Package.objects.all()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'NaturalIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'MildMiniIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'StandardIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Eggdonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Embryodonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                else:
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
            else:
                todayDate = timezone.now()
                prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='United Kingdom').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='United Kingdom').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                count = prolisting.count() + ppqlisting.count()

                prolisting = prolisting.order_by('package_end_list_date')
                ppqlisting = ppqlisting.order_by('package_end_list_date')

                order_data = list(ppqlisting) + list(prolisting)

                paginator = Paginator(order_data, 50)
                page = request.GET.get('page')
                paginationing = paginator.get_page(page)

                context = {
                    'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                }

                return render(request, 'packages/package-search.html', context)
        elif states == 'CZ':
            if 'Region' in request.GET:
                region = request.GET['Region']
                if region == 'Prague':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Prague').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Prague').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Prague', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Prague', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Prague', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Prague', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Prague', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Prague', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Prague', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Prague', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Prague', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Prague', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Prague').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Prague').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Prague').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Prague').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Brno':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brno').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brno').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brno', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brno', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brno', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brno', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brno', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brno', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brno', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brno', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brno', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brno', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brno').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brno').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Brno').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Brno').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                else:
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
            elif 'packages' in request.GET:
                packages = request.GET['packages']
                if packages == 'Allpackagestrue':
                    todayDate = timezone.now()

                    listing = Package.objects.all()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'NaturalIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'MildMiniIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'StandardIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Eggdonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Embryodonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                else:
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
            else:
                todayDate = timezone.now()
                prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Czech Republic').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Czech Republic').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                count = prolisting.count() + ppqlisting.count()

                prolisting = prolisting.order_by('package_end_list_date')
                ppqlisting = ppqlisting.order_by('package_end_list_date')

                order_data = list(ppqlisting) + list(prolisting)

                paginator = Paginator(order_data, 50)
                page = request.GET.get('page')
                paginationing = paginator.get_page(page)

                context = {
                    'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                }

                return render(request, 'packages/package-search.html', context)
        elif states == 'SP':
            if 'Region' in request.GET:
                region = request.GET['Region']
                if region == 'Alicante':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alicante').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alicante').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alicante', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alicante', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alicante', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alicante', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alicante', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alicante', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alicante', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alicante', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alicante', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alicante', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alicante').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alicante').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Alicante').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Alicante').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Barcelona':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Barcelona').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Barcelona').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Barcelona', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Barcelona', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Barcelona', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Barcelona', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Barcelona', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Barcelona', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Barcelona', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Barcelona', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Barcelona', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Barcelona', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Barcelona').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Barcelona').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Barcelona').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Barcelona').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Madrid':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madrid').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madrid').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madrid', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madrid', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madrid', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madrid', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madrid', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madrid', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madrid', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madrid', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madrid', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madrid', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madrid').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madrid').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madrid').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madrid').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Malaga':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Malaga').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Malaga').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Malaga', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Malaga', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Malaga', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Malaga', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Malaga', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Malaga', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Malaga', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Malaga', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Malaga', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Malaga', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Malaga').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Malaga').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Malaga').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Malaga').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Seville':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Seville').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Seville').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Seville', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Seville', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Seville', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Seville', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Seville', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Seville', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Seville', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Seville', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Seville', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Seville', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Seville').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Seville').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Seville').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Seville').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Valencia':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Valencia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Valencia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Valencia', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Valencia', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Valencia', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Valencia', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Valencia', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Valencia', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Valencia', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Valencia', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Valencia', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Valencia', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Valencia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Valencia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Valencia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Valencia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                else:
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
            elif 'packages' in request.GET:
                packages = request.GET['packages']
                if packages == 'Allpackagestrue':
                    todayDate = timezone.now()

                    listing = Package.objects.all()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'NaturalIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'MildMiniIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'StandardIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Eggdonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Embryodonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                else:
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
            else:
                todayDate = timezone.now()
                prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Spain').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Spain').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                count = prolisting.count() + ppqlisting.count()

                prolisting = prolisting.order_by('package_end_list_date')
                ppqlisting = ppqlisting.order_by('package_end_list_date')

                order_data = list(ppqlisting) + list(prolisting)

                paginator = Paginator(order_data, 50)
                page = request.GET.get('page')
                paginationing = paginator.get_page(page)

                context = {
                    'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                }

                return render(request, 'packages/package-search.html', context)
        elif states == 'IN':
            if 'Region' in request.GET:
                region = request.GET['Region']
                if region == 'Chennai':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chennai').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chennai').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chennai', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chennai', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chennai', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chennai', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chennai', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chennai', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chennai', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chennai', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chennai', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chennai', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chennai').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chennai').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chennai').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chennai').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Hyderabad':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Hyderabad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Mumbai':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mumbai').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mumbai').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mumbai', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mumbai', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mumbai', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mumbai', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mumbai', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mumbai', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mumbai', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mumbai', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mumbai', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mumbai', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mumbai').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mumbai').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mumbai').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mumbai').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Patna':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Patna').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Patna').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Patna', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Patna', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Patna', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Patna', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Patna', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Patna', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Patna', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Patna', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Patna', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Patna', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Patna').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Patna').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Patna').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Patna').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Raipur':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Raipur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Raipur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Raipur', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Raipur', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Raipur', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Raipur', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Raipur', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Raipur', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Raipur', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Raipur', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Raipur', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Raipur', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Raipur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Raipur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Raipur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Raipur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Amdavad':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Amdavad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Amdavad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Amdavad', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Amdavad', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Amdavad', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Amdavad', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Amdavad', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Amdavad', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Amdavad', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Amdavad', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Amdavad', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Amdavad', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Amdavad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Amdavad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Amdavad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Amdavad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Chandigarh':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Chandigarh').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Faridabad':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Faridabad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Faridabad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Faridabad', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Faridabad', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Faridabad', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Faridabad', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Faridabad', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Faridabad', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Faridabad', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Faridabad', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Faridabad', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Faridabad', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Faridabad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Faridabad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Faridabad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Faridabad').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Jamshedpur':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jamshedpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Bangalore':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bangalore').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bangalore').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bangalore', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bangalore', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bangalore', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bangalore', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bangalore', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bangalore', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bangalore', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bangalore', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bangalore', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bangalore', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bangalore').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bangalore').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bangalore').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bangalore').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Trivandrum':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Trivandrum').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Kochi':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kochi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kochi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kochi', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kochi', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kochi', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kochi', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kochi', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kochi', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kochi', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kochi', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kochi', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kochi', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kochi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kochi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kochi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kochi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Bhopal':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhopal').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhopal').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhopal', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhopal', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhopal', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhopal', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhopal', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhopal', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhopal', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhopal', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhopal', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhopal', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhopal').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhopal').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhopal').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhopal').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Indore':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indore').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indore').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indore', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indore', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indore', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indore', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indore', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indore', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indore', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indore', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indore', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indore', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indore').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indore').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Indore').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Indore').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Nagpur':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nagpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nagpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nagpur', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nagpur', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nagpur', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nagpur', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nagpur', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nagpur', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nagpur', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nagpur', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nagpur', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nagpur', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nagpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nagpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nagpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nagpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Bhubaneswar':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Bhubaneswar').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Ludhiana':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ludhiana').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Jaipur':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jaipur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jaipur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jaipur', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jaipur', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jaipur', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jaipur', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jaipur', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jaipur', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jaipur', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jaipur', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jaipur', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jaipur', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jaipur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jaipur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jaipur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jaipur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Lucknow':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Lucknow').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Lucknow').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Lucknow', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Lucknow', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Lucknow', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Lucknow', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Lucknow', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Lucknow', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Lucknow', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Lucknow', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Lucknow', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Lucknow', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Lucknow').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Lucknow').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Lucknow').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Lucknow').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Kanpur':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kanpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kanpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kanpur', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kanpur', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kanpur', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kanpur', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kanpur', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kanpur', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kanpur', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kanpur', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kanpur', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kanpur', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kanpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kanpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kanpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kanpur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Dehradun':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Dehradun').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Dehradun').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Dehradun', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Dehradun', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Dehradun', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Dehradun', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Dehradun', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Dehradun', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Dehradun', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Dehradun', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Dehradun', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Dehradun', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Dehradun').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Dehradun').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Dehradun').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Dehradun').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Kolkata':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kolkata').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kolkata').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kolkata', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kolkata', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kolkata', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kolkata', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kolkata', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kolkata', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kolkata', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kolkata', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kolkata', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kolkata', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kolkata').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kolkata').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Kolkata').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Kolkata').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Visakhapatnam':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Visakhapatnam').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Vijayawada':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vijayawada').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'New Delhi':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Delhi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Delhi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Delhi', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Delhi', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Delhi', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Delhi', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Delhi', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Delhi', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Delhi', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Delhi', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Delhi', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Delhi', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Delhi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Delhi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='New Delhi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='New Delhi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Vadodara':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vadodara').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vadodara').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vadodara', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vadodara', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vadodara', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vadodara', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vadodara', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vadodara', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vadodara', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vadodara', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vadodara', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vadodara', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vadodara').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vadodara').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Vadodara').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Vadodara').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Gurugram':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gurugram').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gurugram').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gurugram', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gurugram', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gurugram', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gurugram', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gurugram', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gurugram', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gurugram', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gurugram', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gurugram', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gurugram', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gurugram').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gurugram').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gurugram').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gurugram').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Rohtak':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rohtak').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rohtak').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rohtak', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rohtak', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rohtak', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rohtak', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rohtak', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rohtak', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rohtak', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rohtak', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rohtak', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rohtak', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rohtak').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rohtak').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Rohtak').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Rohtak').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Jammu':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jammu').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jammu').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jammu', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jammu', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jammu', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jammu', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jammu', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jammu', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jammu', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jammu', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jammu', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jammu', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jammu').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jammu').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Jammu').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Jammu').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Ranchi':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ranchi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ranchi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ranchi', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ranchi', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ranchi', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ranchi', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ranchi', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ranchi', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ranchi', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ranchi', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ranchi', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ranchi', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ranchi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ranchi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Ranchi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Ranchi').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Gwalior':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gwalior').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gwalior').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gwalior', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gwalior', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gwalior', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gwalior', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gwalior', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gwalior', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gwalior', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gwalior', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gwalior', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gwalior', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gwalior').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gwalior').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gwalior').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gwalior').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Pune':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pune').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pune').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pune', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pune', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pune', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pune', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pune', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pune', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pune', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pune', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pune', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pune', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pune').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pune').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Pune').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Pune').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Warangal':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Warangal').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Warangal').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Warangal', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Warangal', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Warangal', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Warangal', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Warangal', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Warangal', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Warangal', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Warangal', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Warangal', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Warangal', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Warangal').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Warangal').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Warangal').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Warangal').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Gachibowli':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Gachibowli').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Madhapur':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madhapur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madhapur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madhapur', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madhapur', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madhapur', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madhapur', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madhapur', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madhapur', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madhapur', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madhapur', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madhapur', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madhapur', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madhapur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madhapur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Madhapur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Madhapur').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Noida':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Noida').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Noida').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Noida', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Noida', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Noida', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Noida', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Noida', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Noida', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Noida', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Noida', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Noida', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Noida', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Noida').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Noida').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Noida').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Noida').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Meerut':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Meerut').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Meerut').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Meerut', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Meerut', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Meerut', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Meerut', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Meerut', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Meerut', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Meerut', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Meerut', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Meerut', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Meerut', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Meerut').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Meerut').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Meerut').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Meerut').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Haldwani':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Haldwani').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Haldwani').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Haldwani', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Haldwani', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Haldwani', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Haldwani', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Haldwani', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Haldwani', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Haldwani', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Haldwani', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Haldwani', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Haldwani', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Haldwani').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Haldwani').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Haldwani').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Haldwani').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                else:
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
            elif 'packages' in request.GET:
                packages = request.GET['packages']
                if packages == 'Allpackagestrue':
                    todayDate = timezone.now()

                    listing = Package.objects.all()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'NaturalIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'MildMiniIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'StandardIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Eggdonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Embryodonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                else:
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
            else:
                todayDate = timezone.now()
                prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='India').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='India').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                count = prolisting.count() + ppqlisting.count()

                prolisting = prolisting.order_by('package_end_list_date')
                ppqlisting = ppqlisting.order_by('package_end_list_date')

                order_data = list(ppqlisting) + list(prolisting)

                paginator = Paginator(order_data, 50)
                page = request.GET.get('page')
                paginationing = paginator.get_page(page)

                context = {
                    'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                }

                return render(request, 'packages/package-search.html', context)
        elif states == 'GR':
            if 'Region' in request.GET:
                region = request.GET['Region']
                if region == 'Athens':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Athens').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Athens').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Athens', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Athens', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Athens', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Athens', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Athens', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Athens', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Athens', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Athens', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Athens', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Athens', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Athens').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Athens').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Athens').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Athens').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Thessaloniki':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Thessaloniki').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                else:
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
            elif 'packages' in request.GET:
                packages = request.GET['packages']
                if packages == 'Allpackagestrue':
                    todayDate = timezone.now()

                    listing = Package.objects.all()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'NaturalIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'MildMiniIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'StandardIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Eggdonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Embryodonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                else:
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
            else:
                todayDate = timezone.now()
                prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Greece').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Greece').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                count = prolisting.count() + ppqlisting.count()

                prolisting = prolisting.order_by('package_end_list_date')
                ppqlisting = ppqlisting.order_by('package_end_list_date')

                order_data = list(ppqlisting) + list(prolisting)

                paginator = Paginator(order_data, 50)
                page = request.GET.get('page')
                paginationing = paginator.get_page(page)

                context = {
                    'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                }

                return render(request, 'packages/package-search.html', context)
        elif states == 'CY':
            if 'Region' in request.GET:
                region = request.GET['Region']
                if region == 'Nicosia':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nicosia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nicosia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nicosia', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nicosia', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nicosia', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nicosia', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nicosia', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nicosia', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nicosia', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nicosia', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nicosia', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nicosia', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nicosia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nicosia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Nicosia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Nicosia').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Girne':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Girne').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Girne').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Girne', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Girne', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Girne', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Girne', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Girne', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Girne', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Girne', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Girne', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Girne', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Girne', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Girne').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Girne').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Girne').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Girne').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                else:
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
            elif 'packages' in request.GET:
                packages = request.GET['packages']
                if packages == 'Allpackagestrue':
                    todayDate = timezone.now()

                    listing = Package.objects.all()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'NaturalIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'MildMiniIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'StandardIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Eggdonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Embryodonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                else:
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
            else:
                todayDate = timezone.now()
                prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Cyprus').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Cyprus').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                count = prolisting.count() + ppqlisting.count()

                prolisting = prolisting.order_by('package_end_list_date')
                ppqlisting = ppqlisting.order_by('package_end_list_date')

                order_data = list(ppqlisting) + list(prolisting)

                paginator = Paginator(order_data, 50)
                page = request.GET.get('page')
                paginationing = paginator.get_page(page)

                context = {
                    'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                }

                return render(request, 'packages/package-search.html', context)
        elif states == 'MX':
            if 'Region' in request.GET:
                region = request.GET['Region']
                if region == 'Cancún':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cancún').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cancún').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cancún', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cancún', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cancún', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cancún', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cancún', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cancún', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cancún', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cancún', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cancún', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cancún', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cancún').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cancún').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Cancún').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Cancún').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                elif region == 'Mexico City':
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mexico City').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mexico City').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mexico City', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mexico City', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mexico City', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mexico City', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mexico City', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mexico City', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mexico City', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mexico City', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mexico City', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mexico City', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mexico City').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mexico City').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicRegion__iexact='Mexico City').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicRegion__iexact='Mexico City').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
                else:
                    if 'packages' in request.GET:
                        packages = request.GET['packages']
                        if packages == 'Allpackagestrue':
                            todayDate = timezone.now()

                            listing = Package.objects.all()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'NaturalIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'MildMiniIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'StandardIVFpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Eggdonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        elif packages == 'Embryodonationpackages':
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                        else:
                            todayDate = timezone.now()
                            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                            count = prolisting.count() + ppqlisting.count()

                            prolisting = prolisting.order_by('package_end_list_date')
                            ppqlisting = ppqlisting.order_by('package_end_list_date')

                            order_data = list(ppqlisting) + list(prolisting)

                            paginator = Paginator(order_data, 50)
                            page = request.GET.get('page')
                            paginationing = paginator.get_page(page)

                            context = {
                                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                            }

                            return render(request, 'packages/package-search.html', context)
                    else:
                        todayDate = timezone.now()
                        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                        count = prolisting.count() + ppqlisting.count()

                        prolisting = prolisting.order_by('package_end_list_date')
                        ppqlisting = ppqlisting.order_by('package_end_list_date')

                        order_data = list(ppqlisting) + list(prolisting)

                        paginator = Paginator(order_data, 50)
                        page = request.GET.get('page')
                        paginationing = paginator.get_page(page)

                        context = {
                            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                        }

                        return render(request, 'packages/package-search.html', context)
            elif 'packages' in request.GET:
                packages = request.GET['packages']
                if packages == 'Allpackagestrue':
                    todayDate = timezone.now()

                    listing = Package.objects.all()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'NaturalIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Natural IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'MildMiniIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Mild (Mini) IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'StandardIVFpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Standard IVF packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Eggdonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Egg donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                elif packages == 'Embryodonationpackages':
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico', packagecategory = 'Embryo donation packages').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
                else:
                    todayDate = timezone.now()
                    prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                    count = prolisting.count() + ppqlisting.count()

                    prolisting = prolisting.order_by('package_end_list_date')
                    ppqlisting = ppqlisting.order_by('package_end_list_date')

                    order_data = list(ppqlisting) + list(prolisting)

                    paginator = Paginator(order_data, 50)
                    page = request.GET.get('page')
                    paginationing = paginator.get_page(page)

                    context = {
                        'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                    }

                    return render(request, 'packages/package-search.html', context)
            else:
                todayDate = timezone.now()
                prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False, packageclinic__clinicState__iexact='Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False, packageclinic__clinicState__iexact='Mexico').exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
                count = prolisting.count() + ppqlisting.count()

                prolisting = prolisting.order_by('package_end_list_date')
                ppqlisting = ppqlisting.order_by('package_end_list_date')

                order_data = list(ppqlisting) + list(prolisting)

                paginator = Paginator(order_data, 50)
                page = request.GET.get('page')
                paginationing = paginator.get_page(page)

                context = {
                    'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
                }

                return render(request, 'packages/package-search.html', context)
        else:
            todayDate = timezone.now()

            listing = Package.objects.all()
            prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False).exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
            ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False).exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
            count = prolisting.count() + ppqlisting.count()

            prolisting = prolisting.order_by('package_end_list_date')
            ppqlisting = ppqlisting.order_by('package_end_list_date')

            order_data = list(ppqlisting) + list(prolisting)

            paginator = Paginator(order_data, 50)
            page = request.GET.get('page')
            paginationing = paginator.get_page(page)

            context = {
                'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
            }

            return render(request, 'packages/package-search.html', context)
    else:
        todayDate = timezone.now()

        listing = Package.objects.all()
        prolisting = Package.objects.filter(packageclinic__pro_is_published = True, packageclinic__ppq_is_published = False).exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
        ppqlisting = Package.objects.filter(packageclinic__ppq_is_published = True, packageclinic__pro_is_published = False).exclude(package_end_list_date__lte=todayDate).exclude(is_package_active=False)
        count = prolisting.count() + ppqlisting.count()

        prolisting = prolisting.order_by('package_end_list_date')
        ppqlisting = ppqlisting.order_by('package_end_list_date')

        order_data = list(ppqlisting) + list(prolisting)

        paginator = Paginator(order_data, 50)
        page = request.GET.get('page')
        paginationing = paginator.get_page(page)

        context = {
            'count': count, 'countall': countall, 'order_data': paginationing, 'paginationing': paginationing, 'blog': blog, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_STATES': CATEGORY_CHOICES_STATES, 'CATEGORY_CHOICES_US_REGION': CATEGORY_CHOICES_US_REGION, 'CATEGORY_CHOICES_UK_CITIES': CATEGORY_CHOICES_UK_CITIES, 'CATEGORY_CHOICES_CZ_CITIES': CATEGORY_CHOICES_CZ_CITIES, 'CATEGORY_CHOICES_SP_CITIES': CATEGORY_CHOICES_SP_CITIES, 'CATEGORY_CHOICES_IN_CITIES': CATEGORY_CHOICES_IN_CITIES, 'CATEGORY_CHOICES_GR_CITIES': CATEGORY_CHOICES_GR_CITIES, 'CATEGORY_CHOICES_CY_CITIES': CATEGORY_CHOICES_CY_CITIES, 'AL_CITIES': AL_CITIES, 'AZ_CITIES': AZ_CITIES, 'CA_CITIES': CA_CITIES, 'CO_CITIES': CO_CITIES, 'CT_CITIES': CT_CITIES, 'DE_CITIES': DE_CITIES, 'FL_CITIES': FL_CITIES, 'GA_CITIES': GA_CITIES, 'HI_CITIES': HI_CITIES, 'IL_CITIES': IL_CITIES, 'IN_CITIES': IN_CITIES, 'KY_CITIES': KY_CITIES, 'LA_CITIES': LA_CITIES, 'ME_CITIES': ME_CITIES, 'MA_CITIES': MA_CITIES, 'MO_CITIES': MO_CITIES, 'NV_CITIES': NV_CITIES, 'NJ_CITIES': NJ_CITIES, 'NY_CITIES': NY_CITIES, 'NC_CITIES': NC_CITIES, 'OH_CITIES': OH_CITIES, 'OK_CITIES': OK_CITIES, 'OR_CITIES': OR_CITIES, 'PA_CITIES': PA_CITIES, 'TN_CITIES': TN_CITIES, 'TX_CITIES': TX_CITIES, 'VA_CITIES': VA_CITIES, 'WA_CITIES': WA_CITIES, 'values': request.GET,
        }

        return render(request, 'packages/package-search.html', context)
